
stm32fxxdriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000840  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  080009e8  080009e8  000109e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080009f4  080009f4  000109fc  2**0
                  CONTENTS
  4 .ARM          00000000  080009f4  080009f4  000109fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080009f4  080009fc  000109fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080009f4  080009f4  000109f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080009f8  080009f8  000109f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000109fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000109fc  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000109fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001173  00000000  00000000  00010a2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000409  00000000  00000000  00011b9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000118  00000000  00000000  00011fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000000e0  00000000  00000000  000120c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002022  00000000  00000000  000121a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001546  00000000  00000000  000141c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00008a33  00000000  00000000  00015708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0001e13b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000038c  00000000  00000000  0001e18c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080009d0 	.word	0x080009d0

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	080009d0 	.word	0x080009d0

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <GPIO_PeriClockControl>:
#include "stm32fxx_gpio.h"
/*
 * Peripheral Clock setup
 */
int count =5;
void GPIO_PeriClockControl(GPIO_RegDef_t *GPIO,uint8_t state){
 80001f8:	b480      	push	{r7}
 80001fa:	b083      	sub	sp, #12
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
 8000200:	460b      	mov	r3, r1
 8000202:	70fb      	strb	r3, [r7, #3]


	if(state==ENABLE)
 8000204:	78fb      	ldrb	r3, [r7, #3]
 8000206:	2b01      	cmp	r3, #1
 8000208:	d161      	bne.n	80002ce <GPIO_PeriClockControl+0xd6>
	{
		if(GPIO==GPIOA){
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	4a33      	ldr	r2, [pc, #204]	; (80002dc <GPIO_PeriClockControl+0xe4>)
 800020e:	4293      	cmp	r3, r2
 8000210:	d106      	bne.n	8000220 <GPIO_PeriClockControl+0x28>
					GPIOA_PERI_CLOCK_EN();
 8000212:	4b33      	ldr	r3, [pc, #204]	; (80002e0 <GPIO_PeriClockControl+0xe8>)
 8000214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000216:	4a32      	ldr	r2, [pc, #200]	; (80002e0 <GPIO_PeriClockControl+0xe8>)
 8000218:	f043 0301 	orr.w	r3, r3, #1
 800021c:	6313      	str	r3, [r2, #48]	; 0x30

	}



}
 800021e:	e056      	b.n	80002ce <GPIO_PeriClockControl+0xd6>
		} else if(GPIO==GPIOB){
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	4a30      	ldr	r2, [pc, #192]	; (80002e4 <GPIO_PeriClockControl+0xec>)
 8000224:	4293      	cmp	r3, r2
 8000226:	d106      	bne.n	8000236 <GPIO_PeriClockControl+0x3e>
					GPIOB_PERI_CLOCK_EN();
 8000228:	4b2d      	ldr	r3, [pc, #180]	; (80002e0 <GPIO_PeriClockControl+0xe8>)
 800022a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800022c:	4a2c      	ldr	r2, [pc, #176]	; (80002e0 <GPIO_PeriClockControl+0xe8>)
 800022e:	f043 0302 	orr.w	r3, r3, #2
 8000232:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000234:	e04b      	b.n	80002ce <GPIO_PeriClockControl+0xd6>
		} else if(GPIO==GPIOC){
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	4a2b      	ldr	r2, [pc, #172]	; (80002e8 <GPIO_PeriClockControl+0xf0>)
 800023a:	4293      	cmp	r3, r2
 800023c:	d106      	bne.n	800024c <GPIO_PeriClockControl+0x54>
					GPIOC_PERI_CLOCK_EN();
 800023e:	4b28      	ldr	r3, [pc, #160]	; (80002e0 <GPIO_PeriClockControl+0xe8>)
 8000240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000242:	4a27      	ldr	r2, [pc, #156]	; (80002e0 <GPIO_PeriClockControl+0xe8>)
 8000244:	f043 0304 	orr.w	r3, r3, #4
 8000248:	6313      	str	r3, [r2, #48]	; 0x30
}
 800024a:	e040      	b.n	80002ce <GPIO_PeriClockControl+0xd6>
		} else if(GPIO==GPIOD){
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	4a27      	ldr	r2, [pc, #156]	; (80002ec <GPIO_PeriClockControl+0xf4>)
 8000250:	4293      	cmp	r3, r2
 8000252:	d106      	bne.n	8000262 <GPIO_PeriClockControl+0x6a>
					GPIOD_PERI_CLOCK_EN();
 8000254:	4b22      	ldr	r3, [pc, #136]	; (80002e0 <GPIO_PeriClockControl+0xe8>)
 8000256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000258:	4a21      	ldr	r2, [pc, #132]	; (80002e0 <GPIO_PeriClockControl+0xe8>)
 800025a:	f043 0308 	orr.w	r3, r3, #8
 800025e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000260:	e035      	b.n	80002ce <GPIO_PeriClockControl+0xd6>
		}else if(GPIO==GPIOE){
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	4a22      	ldr	r2, [pc, #136]	; (80002f0 <GPIO_PeriClockControl+0xf8>)
 8000266:	4293      	cmp	r3, r2
 8000268:	d106      	bne.n	8000278 <GPIO_PeriClockControl+0x80>
					GPIOE_PERI_CLOCK_EN();
 800026a:	4b1d      	ldr	r3, [pc, #116]	; (80002e0 <GPIO_PeriClockControl+0xe8>)
 800026c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800026e:	4a1c      	ldr	r2, [pc, #112]	; (80002e0 <GPIO_PeriClockControl+0xe8>)
 8000270:	f043 0310 	orr.w	r3, r3, #16
 8000274:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000276:	e02a      	b.n	80002ce <GPIO_PeriClockControl+0xd6>
		else if(GPIO==GPIOF){
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	4a1e      	ldr	r2, [pc, #120]	; (80002f4 <GPIO_PeriClockControl+0xfc>)
 800027c:	4293      	cmp	r3, r2
 800027e:	d106      	bne.n	800028e <GPIO_PeriClockControl+0x96>
					GPIOF_PERI_CLOCK_EN();
 8000280:	4b17      	ldr	r3, [pc, #92]	; (80002e0 <GPIO_PeriClockControl+0xe8>)
 8000282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000284:	4a16      	ldr	r2, [pc, #88]	; (80002e0 <GPIO_PeriClockControl+0xe8>)
 8000286:	f043 0320 	orr.w	r3, r3, #32
 800028a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800028c:	e01f      	b.n	80002ce <GPIO_PeriClockControl+0xd6>
		else if(GPIO==GPIOG){
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	4a19      	ldr	r2, [pc, #100]	; (80002f8 <GPIO_PeriClockControl+0x100>)
 8000292:	4293      	cmp	r3, r2
 8000294:	d106      	bne.n	80002a4 <GPIO_PeriClockControl+0xac>
					GPIOG_PERI_CLOCK_EN();
 8000296:	4b12      	ldr	r3, [pc, #72]	; (80002e0 <GPIO_PeriClockControl+0xe8>)
 8000298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800029a:	4a11      	ldr	r2, [pc, #68]	; (80002e0 <GPIO_PeriClockControl+0xe8>)
 800029c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002a0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002a2:	e014      	b.n	80002ce <GPIO_PeriClockControl+0xd6>
		else if(GPIO==GPIOH){
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	4a15      	ldr	r2, [pc, #84]	; (80002fc <GPIO_PeriClockControl+0x104>)
 80002a8:	4293      	cmp	r3, r2
 80002aa:	d106      	bne.n	80002ba <GPIO_PeriClockControl+0xc2>
					GPIOH_PERI_CLOCK_EN();
 80002ac:	4b0c      	ldr	r3, [pc, #48]	; (80002e0 <GPIO_PeriClockControl+0xe8>)
 80002ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b0:	4a0b      	ldr	r2, [pc, #44]	; (80002e0 <GPIO_PeriClockControl+0xe8>)
 80002b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002b6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002b8:	e009      	b.n	80002ce <GPIO_PeriClockControl+0xd6>
		else if(GPIO==GPIOI){
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	4a10      	ldr	r2, [pc, #64]	; (8000300 <GPIO_PeriClockControl+0x108>)
 80002be:	4293      	cmp	r3, r2
 80002c0:	d105      	bne.n	80002ce <GPIO_PeriClockControl+0xd6>
					GPIOI_PERI_CLOCK_EN();
 80002c2:	4b07      	ldr	r3, [pc, #28]	; (80002e0 <GPIO_PeriClockControl+0xe8>)
 80002c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002c6:	4a06      	ldr	r2, [pc, #24]	; (80002e0 <GPIO_PeriClockControl+0xe8>)
 80002c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002cc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002ce:	bf00      	nop
 80002d0:	370c      	adds	r7, #12
 80002d2:	46bd      	mov	sp, r7
 80002d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d8:	4770      	bx	lr
 80002da:	bf00      	nop
 80002dc:	40020000 	.word	0x40020000
 80002e0:	40023800 	.word	0x40023800
 80002e4:	40020400 	.word	0x40020400
 80002e8:	40020800 	.word	0x40020800
 80002ec:	40020c00 	.word	0x40020c00
 80002f0:	40021000 	.word	0x40021000
 80002f4:	40021400 	.word	0x40021400
 80002f8:	40021800 	.word	0x40021800
 80002fc:	40021c00 	.word	0x40021c00
 8000300:	40022000 	.word	0x40022000

08000304 <GPIO_Init>:

/*
 * Init and De-Init
 */
void GPIO_Init(GPIOx_Handle_t *pGPIOHandle){
 8000304:	b580      	push	{r7, lr}
 8000306:	b086      	sub	sp, #24
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]

	uint32_t temp=0;
 800030c:	2300      	movs	r3, #0
 800030e:	617b      	str	r3, [r7, #20]

	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	2101      	movs	r1, #1
 8000316:	4618      	mov	r0, r3
 8000318:	f7ff ff6e 	bl	80001f8 <GPIO_PeriClockControl>
	//1. Configure the mode of the pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode<=GPIO_MODE_ANALOG){
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	795b      	ldrb	r3, [r3, #5]
 8000320:	2b03      	cmp	r3, #3
 8000322:	d820      	bhi.n	8000366 <GPIO_Init+0x62>

		//none interupt mode
		temp= (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode<<(2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	795b      	ldrb	r3, [r3, #5]
 8000328:	461a      	mov	r2, r3
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	791b      	ldrb	r3, [r3, #4]
 800032e:	005b      	lsls	r3, r3, #1
 8000330:	fa02 f303 	lsl.w	r3, r2, r3
 8000334:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &=~(0x3<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clearing
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	681a      	ldr	r2, [r3, #0]
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	791b      	ldrb	r3, [r3, #4]
 8000340:	005b      	lsls	r3, r3, #1
 8000342:	2103      	movs	r1, #3
 8000344:	fa01 f303 	lsl.w	r3, r1, r3
 8000348:	43db      	mvns	r3, r3
 800034a:	4619      	mov	r1, r3
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	400a      	ands	r2, r1
 8000352:	601a      	str	r2, [r3, #0]
		// each bit fields take 2
		pGPIOHandle->pGPIOx->MODER |= temp;
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	6819      	ldr	r1, [r3, #0]
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	697a      	ldr	r2, [r7, #20]
 8000360:	430a      	orrs	r2, r1
 8000362:	601a      	str	r2, [r3, #0]
 8000364:	e0cb      	b.n	80004fe <GPIO_Init+0x1fa>

		//DBA

	}else {
		//interupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode==GPIO_MODE_IT_FT){
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	795b      	ldrb	r3, [r3, #5]
 800036a:	2b04      	cmp	r3, #4
 800036c:	d117      	bne.n	800039e <GPIO_Init+0x9a>

			//1. Configure Falling Trigger Selection Reg
			EXTI->FTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800036e:	4b4b      	ldr	r3, [pc, #300]	; (800049c <GPIO_Init+0x198>)
 8000370:	68db      	ldr	r3, [r3, #12]
 8000372:	687a      	ldr	r2, [r7, #4]
 8000374:	7912      	ldrb	r2, [r2, #4]
 8000376:	4611      	mov	r1, r2
 8000378:	2201      	movs	r2, #1
 800037a:	408a      	lsls	r2, r1
 800037c:	4611      	mov	r1, r2
 800037e:	4a47      	ldr	r2, [pc, #284]	; (800049c <GPIO_Init+0x198>)
 8000380:	430b      	orrs	r3, r1
 8000382:	60d3      	str	r3, [r2, #12]
			// Clearing corresponding RTSR
			EXTI->RTSR &=~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000384:	4b45      	ldr	r3, [pc, #276]	; (800049c <GPIO_Init+0x198>)
 8000386:	689b      	ldr	r3, [r3, #8]
 8000388:	687a      	ldr	r2, [r7, #4]
 800038a:	7912      	ldrb	r2, [r2, #4]
 800038c:	4611      	mov	r1, r2
 800038e:	2201      	movs	r2, #1
 8000390:	408a      	lsls	r2, r1
 8000392:	43d2      	mvns	r2, r2
 8000394:	4611      	mov	r1, r2
 8000396:	4a41      	ldr	r2, [pc, #260]	; (800049c <GPIO_Init+0x198>)
 8000398:	400b      	ands	r3, r1
 800039a:	6093      	str	r3, [r2, #8]
 800039c:	e035      	b.n	800040a <GPIO_Init+0x106>

		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode==GPIO_MODE_IT_RT){
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	795b      	ldrb	r3, [r3, #5]
 80003a2:	2b05      	cmp	r3, #5
 80003a4:	d116      	bne.n	80003d4 <GPIO_Init+0xd0>

			//1. Configure the RTSR and FTSR
			EXTI->RTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003a6:	4b3d      	ldr	r3, [pc, #244]	; (800049c <GPIO_Init+0x198>)
 80003a8:	689b      	ldr	r3, [r3, #8]
 80003aa:	687a      	ldr	r2, [r7, #4]
 80003ac:	7912      	ldrb	r2, [r2, #4]
 80003ae:	4611      	mov	r1, r2
 80003b0:	2201      	movs	r2, #1
 80003b2:	408a      	lsls	r2, r1
 80003b4:	4611      	mov	r1, r2
 80003b6:	4a39      	ldr	r2, [pc, #228]	; (800049c <GPIO_Init+0x198>)
 80003b8:	430b      	orrs	r3, r1
 80003ba:	6093      	str	r3, [r2, #8]

			EXTI->FTSR |=(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003bc:	4b37      	ldr	r3, [pc, #220]	; (800049c <GPIO_Init+0x198>)
 80003be:	68db      	ldr	r3, [r3, #12]
 80003c0:	687a      	ldr	r2, [r7, #4]
 80003c2:	7912      	ldrb	r2, [r2, #4]
 80003c4:	4611      	mov	r1, r2
 80003c6:	2201      	movs	r2, #1
 80003c8:	408a      	lsls	r2, r1
 80003ca:	4611      	mov	r1, r2
 80003cc:	4a33      	ldr	r2, [pc, #204]	; (800049c <GPIO_Init+0x198>)
 80003ce:	430b      	orrs	r3, r1
 80003d0:	60d3      	str	r3, [r2, #12]
 80003d2:	e01a      	b.n	800040a <GPIO_Init+0x106>


		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode==GPIO_MODE_IT_RFT){
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	795b      	ldrb	r3, [r3, #5]
 80003d8:	2b06      	cmp	r3, #6
 80003da:	d116      	bne.n	800040a <GPIO_Init+0x106>


			//1.Configure the RFTSR
			EXTI->FTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003dc:	4b2f      	ldr	r3, [pc, #188]	; (800049c <GPIO_Init+0x198>)
 80003de:	68db      	ldr	r3, [r3, #12]
 80003e0:	687a      	ldr	r2, [r7, #4]
 80003e2:	7912      	ldrb	r2, [r2, #4]
 80003e4:	4611      	mov	r1, r2
 80003e6:	2201      	movs	r2, #1
 80003e8:	408a      	lsls	r2, r1
 80003ea:	4611      	mov	r1, r2
 80003ec:	4a2b      	ldr	r2, [pc, #172]	; (800049c <GPIO_Init+0x198>)
 80003ee:	430b      	orrs	r3, r1
 80003f0:	60d3      	str	r3, [r2, #12]
			// Clearing corresponding RTSR
			EXTI->RTSR &=~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003f2:	4b2a      	ldr	r3, [pc, #168]	; (800049c <GPIO_Init+0x198>)
 80003f4:	689b      	ldr	r3, [r3, #8]
 80003f6:	687a      	ldr	r2, [r7, #4]
 80003f8:	7912      	ldrb	r2, [r2, #4]
 80003fa:	4611      	mov	r1, r2
 80003fc:	2201      	movs	r2, #1
 80003fe:	408a      	lsls	r2, r1
 8000400:	43d2      	mvns	r2, r2
 8000402:	4611      	mov	r1, r2
 8000404:	4a25      	ldr	r2, [pc, #148]	; (800049c <GPIO_Init+0x198>)
 8000406:	400b      	ands	r3, r1
 8000408:	6093      	str	r3, [r2, #8]

		}

		//2.Configure the port selection in SYSCFG_EXTI
		uint8_t temp1= pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	791b      	ldrb	r3, [r3, #4]
 800040e:	089b      	lsrs	r3, r3, #2
 8000410:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2= pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4  ;
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	791b      	ldrb	r3, [r3, #4]
 8000416:	f003 0303 	and.w	r3, r3, #3
 800041a:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode=GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	4a1f      	ldr	r2, [pc, #124]	; (80004a0 <GPIO_Init+0x19c>)
 8000422:	4293      	cmp	r3, r2
 8000424:	d04e      	beq.n	80004c4 <GPIO_Init+0x1c0>
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	4a1e      	ldr	r2, [pc, #120]	; (80004a4 <GPIO_Init+0x1a0>)
 800042c:	4293      	cmp	r3, r2
 800042e:	d032      	beq.n	8000496 <GPIO_Init+0x192>
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	4a1c      	ldr	r2, [pc, #112]	; (80004a8 <GPIO_Init+0x1a4>)
 8000436:	4293      	cmp	r3, r2
 8000438:	d02b      	beq.n	8000492 <GPIO_Init+0x18e>
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	4a1b      	ldr	r2, [pc, #108]	; (80004ac <GPIO_Init+0x1a8>)
 8000440:	4293      	cmp	r3, r2
 8000442:	d024      	beq.n	800048e <GPIO_Init+0x18a>
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	4a19      	ldr	r2, [pc, #100]	; (80004b0 <GPIO_Init+0x1ac>)
 800044a:	4293      	cmp	r3, r2
 800044c:	d01d      	beq.n	800048a <GPIO_Init+0x186>
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	4a18      	ldr	r2, [pc, #96]	; (80004b4 <GPIO_Init+0x1b0>)
 8000454:	4293      	cmp	r3, r2
 8000456:	d016      	beq.n	8000486 <GPIO_Init+0x182>
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	4a16      	ldr	r2, [pc, #88]	; (80004b8 <GPIO_Init+0x1b4>)
 800045e:	4293      	cmp	r3, r2
 8000460:	d00f      	beq.n	8000482 <GPIO_Init+0x17e>
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	4a15      	ldr	r2, [pc, #84]	; (80004bc <GPIO_Init+0x1b8>)
 8000468:	4293      	cmp	r3, r2
 800046a:	d008      	beq.n	800047e <GPIO_Init+0x17a>
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	4a13      	ldr	r2, [pc, #76]	; (80004c0 <GPIO_Init+0x1bc>)
 8000472:	4293      	cmp	r3, r2
 8000474:	d101      	bne.n	800047a <GPIO_Init+0x176>
 8000476:	2308      	movs	r3, #8
 8000478:	e025      	b.n	80004c6 <GPIO_Init+0x1c2>
 800047a:	2300      	movs	r3, #0
 800047c:	e023      	b.n	80004c6 <GPIO_Init+0x1c2>
 800047e:	2307      	movs	r3, #7
 8000480:	e021      	b.n	80004c6 <GPIO_Init+0x1c2>
 8000482:	2306      	movs	r3, #6
 8000484:	e01f      	b.n	80004c6 <GPIO_Init+0x1c2>
 8000486:	2305      	movs	r3, #5
 8000488:	e01d      	b.n	80004c6 <GPIO_Init+0x1c2>
 800048a:	2304      	movs	r3, #4
 800048c:	e01b      	b.n	80004c6 <GPIO_Init+0x1c2>
 800048e:	2303      	movs	r3, #3
 8000490:	e019      	b.n	80004c6 <GPIO_Init+0x1c2>
 8000492:	2302      	movs	r3, #2
 8000494:	e017      	b.n	80004c6 <GPIO_Init+0x1c2>
 8000496:	2301      	movs	r3, #1
 8000498:	e015      	b.n	80004c6 <GPIO_Init+0x1c2>
 800049a:	bf00      	nop
 800049c:	40013c00 	.word	0x40013c00
 80004a0:	40020000 	.word	0x40020000
 80004a4:	40020400 	.word	0x40020400
 80004a8:	40020800 	.word	0x40020800
 80004ac:	40020c00 	.word	0x40020c00
 80004b0:	40021000 	.word	0x40021000
 80004b4:	40021400 	.word	0x40021400
 80004b8:	40021800 	.word	0x40021800
 80004bc:	40021c00 	.word	0x40021c00
 80004c0:	40022000 	.word	0x40022000
 80004c4:	2300      	movs	r3, #0
 80004c6:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 80004c8:	4b5a      	ldr	r3, [pc, #360]	; (8000634 <GPIO_Init+0x330>)
 80004ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004cc:	4a59      	ldr	r2, [pc, #356]	; (8000634 <GPIO_Init+0x330>)
 80004ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004d2:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1]= portcode <<(temp2*4);
 80004d4:	7c7a      	ldrb	r2, [r7, #17]
 80004d6:	7cbb      	ldrb	r3, [r7, #18]
 80004d8:	009b      	lsls	r3, r3, #2
 80004da:	fa02 f103 	lsl.w	r1, r2, r3
 80004de:	4a56      	ldr	r2, [pc, #344]	; (8000638 <GPIO_Init+0x334>)
 80004e0:	7cfb      	ldrb	r3, [r7, #19]
 80004e2:	3302      	adds	r3, #2
 80004e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3. Enable EXTI interupt delivery using IMR

		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80004e8:	4b54      	ldr	r3, [pc, #336]	; (800063c <GPIO_Init+0x338>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	687a      	ldr	r2, [r7, #4]
 80004ee:	7912      	ldrb	r2, [r2, #4]
 80004f0:	4611      	mov	r1, r2
 80004f2:	2201      	movs	r2, #1
 80004f4:	408a      	lsls	r2, r1
 80004f6:	4611      	mov	r1, r2
 80004f8:	4a50      	ldr	r2, [pc, #320]	; (800063c <GPIO_Init+0x338>)
 80004fa:	430b      	orrs	r3, r1
 80004fc:	6013      	str	r3, [r2, #0]

	}
	temp=0;
 80004fe:	2300      	movs	r3, #0
 8000500:	617b      	str	r3, [r7, #20]

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	799b      	ldrb	r3, [r3, #6]
 8000506:	461a      	mov	r2, r3
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	791b      	ldrb	r3, [r3, #4]
 800050c:	005b      	lsls	r3, r3, #1
 800050e:	fa02 f303 	lsl.w	r3, r2, r3
 8000512:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	689a      	ldr	r2, [r3, #8]
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	791b      	ldrb	r3, [r3, #4]
 800051e:	005b      	lsls	r3, r3, #1
 8000520:	2103      	movs	r1, #3
 8000522:	fa01 f303 	lsl.w	r3, r1, r3
 8000526:	43db      	mvns	r3, r3
 8000528:	4619      	mov	r1, r3
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	400a      	ands	r2, r1
 8000530:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	6899      	ldr	r1, [r3, #8]
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	697a      	ldr	r2, [r7, #20]
 800053e:	430a      	orrs	r2, r1
 8000540:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	79db      	ldrb	r3, [r3, #7]
 8000546:	461a      	mov	r2, r3
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	791b      	ldrb	r3, [r3, #4]
 800054c:	005b      	lsls	r3, r3, #1
 800054e:	fa02 f303 	lsl.w	r3, r2, r3
 8000552:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	68da      	ldr	r2, [r3, #12]
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	791b      	ldrb	r3, [r3, #4]
 800055e:	005b      	lsls	r3, r3, #1
 8000560:	2103      	movs	r1, #3
 8000562:	fa01 f303 	lsl.w	r3, r1, r3
 8000566:	43db      	mvns	r3, r3
 8000568:	4619      	mov	r1, r3
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	400a      	ands	r2, r1
 8000570:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	68d9      	ldr	r1, [r3, #12]
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	697a      	ldr	r2, [r7, #20]
 800057e:	430a      	orrs	r2, r1
 8000580:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	7a1b      	ldrb	r3, [r3, #8]
 8000586:	461a      	mov	r2, r3
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	791b      	ldrb	r3, [r3, #4]
 800058c:	fa02 f303 	lsl.w	r3, r2, r3
 8000590:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	685a      	ldr	r2, [r3, #4]
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	791b      	ldrb	r3, [r3, #4]
 800059c:	4619      	mov	r1, r3
 800059e:	2301      	movs	r3, #1
 80005a0:	408b      	lsls	r3, r1
 80005a2:	43db      	mvns	r3, r3
 80005a4:	4619      	mov	r1, r3
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	400a      	ands	r2, r1
 80005ac:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	6859      	ldr	r1, [r3, #4]
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	697a      	ldr	r2, [r7, #20]
 80005ba:	430a      	orrs	r2, r1
 80005bc:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	795b      	ldrb	r3, [r3, #5]
 80005c2:	2b02      	cmp	r3, #2
 80005c4:	d131      	bne.n	800062a <GPIO_Init+0x326>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	791b      	ldrb	r3, [r3, #4]
 80005ca:	08db      	lsrs	r3, r3, #3
 80005cc:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	791b      	ldrb	r3, [r3, #4]
 80005d2:	f003 0307 	and.w	r3, r3, #7
 80005d6:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	7c3a      	ldrb	r2, [r7, #16]
 80005de:	3208      	adds	r2, #8
 80005e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80005e4:	7bfb      	ldrb	r3, [r7, #15]
 80005e6:	009b      	lsls	r3, r3, #2
 80005e8:	220f      	movs	r2, #15
 80005ea:	fa02 f303 	lsl.w	r3, r2, r3
 80005ee:	43db      	mvns	r3, r3
 80005f0:	4618      	mov	r0, r3
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	7c3a      	ldrb	r2, [r7, #16]
 80005f8:	4001      	ands	r1, r0
 80005fa:	3208      	adds	r2, #8
 80005fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	7c3a      	ldrb	r2, [r7, #16]
 8000606:	3208      	adds	r2, #8
 8000608:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	7a5b      	ldrb	r3, [r3, #9]
 8000610:	461a      	mov	r2, r3
 8000612:	7bfb      	ldrb	r3, [r7, #15]
 8000614:	009b      	lsls	r3, r3, #2
 8000616:	fa02 f303 	lsl.w	r3, r2, r3
 800061a:	4618      	mov	r0, r3
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	7c3a      	ldrb	r2, [r7, #16]
 8000622:	4301      	orrs	r1, r0
 8000624:	3208      	adds	r2, #8
 8000626:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}


}
 800062a:	bf00      	nop
 800062c:	3718      	adds	r7, #24
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	40023800 	.word	0x40023800
 8000638:	40013800 	.word	0x40013800
 800063c:	40013c00 	.word	0x40013c00

08000640 <SPI_PeriClockControl>:

/*
 * Peripheral Clock setup
 */

void SPI_PeriClockControl(SPI_RegDef_t*pSPIx,uint8_t state){
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
 8000648:	460b      	mov	r3, r1
 800064a:	70fb      	strb	r3, [r7, #3]
	if(state==ENABLE)
 800064c:	78fb      	ldrb	r3, [r7, #3]
 800064e:	2b01      	cmp	r3, #1
 8000650:	d11f      	bne.n	8000692 <SPI_PeriClockControl+0x52>
		{
			if(pSPIx==SPI1){
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	4a12      	ldr	r2, [pc, #72]	; (80006a0 <SPI_PeriClockControl+0x60>)
 8000656:	4293      	cmp	r3, r2
 8000658:	d106      	bne.n	8000668 <SPI_PeriClockControl+0x28>
				SPI1_PCLK_EN();
 800065a:	4b12      	ldr	r3, [pc, #72]	; (80006a4 <SPI_PeriClockControl+0x64>)
 800065c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800065e:	4a11      	ldr	r2, [pc, #68]	; (80006a4 <SPI_PeriClockControl+0x64>)
 8000660:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000664:	6453      	str	r3, [r2, #68]	; 0x44
				SPI3_PCLK_EN();
			}
		}else {
		}

}
 8000666:	e014      	b.n	8000692 <SPI_PeriClockControl+0x52>
			} else if(pSPIx==SPI2){
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	4a0f      	ldr	r2, [pc, #60]	; (80006a8 <SPI_PeriClockControl+0x68>)
 800066c:	4293      	cmp	r3, r2
 800066e:	d106      	bne.n	800067e <SPI_PeriClockControl+0x3e>
				SPI2_PCLK_EN();
 8000670:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <SPI_PeriClockControl+0x64>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000674:	4a0b      	ldr	r2, [pc, #44]	; (80006a4 <SPI_PeriClockControl+0x64>)
 8000676:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800067a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800067c:	e009      	b.n	8000692 <SPI_PeriClockControl+0x52>
			} else if(pSPIx==SPI3){
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	4a0a      	ldr	r2, [pc, #40]	; (80006ac <SPI_PeriClockControl+0x6c>)
 8000682:	4293      	cmp	r3, r2
 8000684:	d105      	bne.n	8000692 <SPI_PeriClockControl+0x52>
				SPI3_PCLK_EN();
 8000686:	4b07      	ldr	r3, [pc, #28]	; (80006a4 <SPI_PeriClockControl+0x64>)
 8000688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068a:	4a06      	ldr	r2, [pc, #24]	; (80006a4 <SPI_PeriClockControl+0x64>)
 800068c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000690:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000692:	bf00      	nop
 8000694:	370c      	adds	r7, #12
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	40013000 	.word	0x40013000
 80006a4:	40023800 	.word	0x40023800
 80006a8:	40003800 	.word	0x40003800
 80006ac:	40003c00 	.word	0x40003c00

080006b0 <SPI_Init>:

/*
 * Init and De-Init
 */
void SPI_Init(SPI_Handle_t *pSPIHandle){
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
	//CLOCK ENABLE

		SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	2101      	movs	r1, #1
 80006be:	4618      	mov	r0, r3
 80006c0:	f7ff ffbe 	bl	8000640 <SPI_PeriClockControl>


		uint32_t temp=0;
 80006c4:	2300      	movs	r3, #0
 80006c6:	60fb      	str	r3, [r7, #12]

		//1. Configure the device mode

		temp|=pSPIHandle->SPIConfig.SPI_DeviceMode<<SPI_CR1_MSTR;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	791b      	ldrb	r3, [r3, #4]
 80006cc:	009b      	lsls	r3, r3, #2
 80006ce:	461a      	mov	r2, r3
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	4313      	orrs	r3, r2
 80006d4:	60fb      	str	r3, [r7, #12]

		//2. Bus config
		if(pSPIHandle->SPIConfig.SPI_BusConfig==SPI_BUS_CFG_FD){
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	795b      	ldrb	r3, [r3, #5]
 80006da:	2b01      	cmp	r3, #1
 80006dc:	d104      	bne.n	80006e8 <SPI_Init+0x38>

			//bidi mode should be clear
			temp &=~(1<<SPI_CR1_BIDIMODE);
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80006e4:	60fb      	str	r3, [r7, #12]
 80006e6:	e014      	b.n	8000712 <SPI_Init+0x62>

		}else if(pSPIHandle->SPIConfig.SPI_BusConfig==SPI_BUS_CFG_HD){
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	795b      	ldrb	r3, [r3, #5]
 80006ec:	2b02      	cmp	r3, #2
 80006ee:	d104      	bne.n	80006fa <SPI_Init+0x4a>

			//bidi mode should be en
			temp |=(1<<SPI_CR1_BIDIMODE);
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006f6:	60fb      	str	r3, [r7, #12]
 80006f8:	e00b      	b.n	8000712 <SPI_Init+0x62>

		}else if(pSPIHandle->SPIConfig.SPI_BusConfig==SPI_BUS_CFG_S_RX){
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	795b      	ldrb	r3, [r3, #5]
 80006fe:	2b03      	cmp	r3, #3
 8000700:	d107      	bne.n	8000712 <SPI_Init+0x62>

			//bidi mode should be clear
			temp &=~(1<<SPI_CR1_BIDIMODE);
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000708:	60fb      	str	r3, [r7, #12]
			//RX only  must be set
			temp |=(1<<SPI_CR1_RXONLY);
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000710:	60fb      	str	r3, [r7, #12]
		}
		//3. Configure the spi serial clock speed
		temp |= pSPIHandle->SPIConfig.SPI_SclkSpeed<<SPI_CR1_BR;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	799b      	ldrb	r3, [r3, #6]
 8000716:	00db      	lsls	r3, r3, #3
 8000718:	461a      	mov	r2, r3
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	4313      	orrs	r3, r2
 800071e:	60fb      	str	r3, [r7, #12]
		//4. DFF
		temp|= pSPIHandle->SPIConfig.SPI_DFF<< SPI_CR1_DFF;
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	79db      	ldrb	r3, [r3, #7]
 8000724:	02db      	lsls	r3, r3, #11
 8000726:	461a      	mov	r2, r3
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	4313      	orrs	r3, r2
 800072c:	60fb      	str	r3, [r7, #12]
		//5. CPOL
		temp |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	7a1b      	ldrb	r3, [r3, #8]
 8000732:	005b      	lsls	r3, r3, #1
 8000734:	461a      	mov	r2, r3
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	4313      	orrs	r3, r2
 800073a:	60fb      	str	r3, [r7, #12]
		//6. CPHA
		temp |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	7a5b      	ldrb	r3, [r3, #9]
 8000740:	461a      	mov	r2, r3
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	4313      	orrs	r3, r2
 8000746:	60fb      	str	r3, [r7, #12]
		//7.SSM
		temp |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM;
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	7a9b      	ldrb	r3, [r3, #10]
 800074c:	025b      	lsls	r3, r3, #9
 800074e:	461a      	mov	r2, r3
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	4313      	orrs	r3, r2
 8000754:	60fb      	str	r3, [r7, #12]
		pSPIHandle->pSPIx->CR1 = temp;
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	68fa      	ldr	r2, [r7, #12]
 800075c:	601a      	str	r2, [r3, #0]





}
 800075e:	bf00      	nop
 8000760:	3710      	adds	r7, #16
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}

08000766 <SPI_GetFlagStatus>:




}
uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx,uint32_t flagName){
 8000766:	b480      	push	{r7}
 8000768:	b083      	sub	sp, #12
 800076a:	af00      	add	r7, sp, #0
 800076c:	6078      	str	r0, [r7, #4]
 800076e:	6039      	str	r1, [r7, #0]

	if(pSPIx->SR & flagName){
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	689a      	ldr	r2, [r3, #8]
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	4013      	ands	r3, r2
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <SPI_GetFlagStatus+0x1a>

		return FLAG_SET;
 800077c:	2301      	movs	r3, #1
 800077e:	e000      	b.n	8000782 <SPI_GetFlagStatus+0x1c>

	}
	return FLAG_RESET;
 8000780:	2300      	movs	r3, #0


}
 8000782:	4618      	mov	r0, r3
 8000784:	370c      	adds	r7, #12
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr

0800078e <SPI_Send>:
/*
 * Data send and Receive
 */
// Blocking call -> phai truyen het data thi function moi tra ve

void SPI_Send(SPI_RegDef_t *pSPIx,uint8_t*pTxBuffer,uint32_t len){
 800078e:	b580      	push	{r7, lr}
 8000790:	b084      	sub	sp, #16
 8000792:	af00      	add	r7, sp, #0
 8000794:	60f8      	str	r0, [r7, #12]
 8000796:	60b9      	str	r1, [r7, #8]
 8000798:	607a      	str	r2, [r7, #4]
	while(len>0){
 800079a:	e027      	b.n	80007ec <SPI_Send+0x5e>
		//Wait until TXE is set
		while(SPI_GetFlagStatus(pSPIx,SPI_TXE_FLAG)==FLAG_RESET);
 800079c:	bf00      	nop
 800079e:	2102      	movs	r1, #2
 80007a0:	68f8      	ldr	r0, [r7, #12]
 80007a2:	f7ff ffe0 	bl	8000766 <SPI_GetFlagStatus>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d0f8      	beq.n	800079e <SPI_Send+0x10>

		// Check the DFF bit
		if(pSPIx->CR1 &(1<<SPI_CR1_DFF))
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d00e      	beq.n	80007d6 <SPI_Send+0x48>
		{
			//16 bit DFF
			//1. Load the date in to the register
			pSPIx->DR = *((uint16_t*)pTxBuffer);
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	881b      	ldrh	r3, [r3, #0]
 80007bc:	461a      	mov	r2, r3
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	60da      	str	r2, [r3, #12]
			len--;
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	3b01      	subs	r3, #1
 80007c6:	607b      	str	r3, [r7, #4]
			len--;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	3b01      	subs	r3, #1
 80007cc:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;
 80007ce:	68bb      	ldr	r3, [r7, #8]
 80007d0:	3301      	adds	r3, #1
 80007d2:	60bb      	str	r3, [r7, #8]
 80007d4:	e00a      	b.n	80007ec <SPI_Send+0x5e>
		}else {
			//8 bit
			pSPIx->DR = *pTxBuffer;
 80007d6:	68bb      	ldr	r3, [r7, #8]
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	461a      	mov	r2, r3
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	60da      	str	r2, [r3, #12]
			len--;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	3b01      	subs	r3, #1
 80007e4:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 80007e6:	68bb      	ldr	r3, [r7, #8]
 80007e8:	3301      	adds	r3, #1
 80007ea:	60bb      	str	r3, [r7, #8]
	while(len>0){
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d1d4      	bne.n	800079c <SPI_Send+0xe>





}
 80007f2:	bf00      	nop
 80007f4:	bf00      	nop
 80007f6:	3710      	adds	r7, #16
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}

080007fc <SPI_PeripheralControl>:
void SPI_IRQHandling(SPI_Handle_t *pHandle);
void SPI_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority);
/*
 *
 */
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx,uint8_t state){
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	460b      	mov	r3, r1
 8000806:	70fb      	strb	r3, [r7, #3]

	if(state==ENABLE){
 8000808:	78fb      	ldrb	r3, [r7, #3]
 800080a:	2b01      	cmp	r3, #1
 800080c:	d106      	bne.n	800081c <SPI_PeripheralControl+0x20>
		pSPIx->CR1|= (1<<SPI_CR1_SPE);
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	601a      	str	r2, [r3, #0]
	}else{

		pSPIx->CR1&= ~(1<<SPI_CR1_SPE);
	}

}
 800081a:	e005      	b.n	8000828 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1&= ~(1<<SPI_CR1_SPE);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	601a      	str	r2, [r3, #0]
}
 8000828:	bf00      	nop
 800082a:	370c      	adds	r7, #12
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr

08000834 <SPI_SSIConfig>:
void SPI_SSIConfig(SPI_RegDef_t *pSPIx,uint8_t state){
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
 800083c:	460b      	mov	r3, r1
 800083e:	70fb      	strb	r3, [r7, #3]

	if(state==ENABLE){
 8000840:	78fb      	ldrb	r3, [r7, #3]
 8000842:	2b01      	cmp	r3, #1
 8000844:	d106      	bne.n	8000854 <SPI_SSIConfig+0x20>
		pSPIx->CR1|= (1<<SPI_CR1_SSI);
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	601a      	str	r2, [r3, #0]
	}else{

		pSPIx->CR1&= ~(1<<SPI_CR1_SSI);
	}

}
 8000852:	e005      	b.n	8000860 <SPI_SSIConfig+0x2c>
		pSPIx->CR1&= ~(1<<SPI_CR1_SSI);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	601a      	str	r2, [r3, #0]
}
 8000860:	bf00      	nop
 8000862:	370c      	adds	r7, #12
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr

0800086c <SPI2_GPIO_Inits>:
//PB15->SPI2_MOSI
//PB14->MISO
//PB13->SCLK
//PB12->NSS
//AFMODE 5
void SPI2_GPIO_Inits(void){
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0
	//SCLK
	GPIOx_Handle_t SPIPins;
	SPIPins.pGPIOx=GPIOB;
 8000872:	4b0e      	ldr	r3, [pc, #56]	; (80008ac <SPI2_GPIO_Inits+0x40>)
 8000874:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode=GPIO_MODE_ALTFN;
 8000876:	2302      	movs	r3, #2
 8000878:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode=5;
 800087a:	2305      	movs	r3, #5
 800087c:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType=GPIO_OP_TYPE_PP;
 800087e:	2300      	movs	r3, #0
 8000880:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl= GPIO_NO_PUPD;
 8000882:	2300      	movs	r3, #0
 8000884:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed=GPIO_SPEED_FAST;
 8000886:	2302      	movs	r3, #2
 8000888:	72bb      	strb	r3, [r7, #10]

	SPIPins.GPIO_PinConfig.GPIO_PinNumber=GPIO_PIN_NO_13;
 800088a:	230d      	movs	r3, #13
 800088c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800088e:	1d3b      	adds	r3, r7, #4
 8000890:	4618      	mov	r0, r3
 8000892:	f7ff fd37 	bl	8000304 <GPIO_Init>

	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber=GPIO_PIN_NO_15;
 8000896:	230f      	movs	r3, #15
 8000898:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800089a:	1d3b      	adds	r3, r7, #4
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff fd31 	bl	8000304 <GPIO_Init>
	//NSS
	//SPIPins.GPIO_PinConfig.GPIO_PinNumber=GPIO_PIN_NO_12;
	//GPIO_Init(&SPIPins);


}
 80008a2:	bf00      	nop
 80008a4:	3710      	adds	r7, #16
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40020400 	.word	0x40020400

080008b0 <SPI2_Inits>:
void SPI2_Inits(void){
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2Handle;
	SPI2Handle.pSPIx=SPI2;
 80008b6:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <SPI2_Inits+0x38>)
 80008b8:	607b      	str	r3, [r7, #4]
	SPI2Handle.SPIConfig.SPI_BusConfig= SPI_BUS_CFG_FD;
 80008ba:	2301      	movs	r3, #1
 80008bc:	727b      	strb	r3, [r7, #9]
	SPI2Handle.SPIConfig.SPI_DeviceMode=SPI_DEVICE_MODE_MASTER;
 80008be:	2301      	movs	r3, #1
 80008c0:	723b      	strb	r3, [r7, #8]
	SPI2Handle.SPIConfig.SPI_SclkSpeed= SPI_SCLK_SPEED_DIV2;//8MHZ
 80008c2:	2300      	movs	r3, #0
 80008c4:	72bb      	strb	r3, [r7, #10]
	SPI2Handle.SPIConfig.SPI_DFF=SPI_DFF_8;
 80008c6:	2300      	movs	r3, #0
 80008c8:	72fb      	strb	r3, [r7, #11]
	SPI2Handle.SPIConfig.SPI_CPOL=SPI_CPOL_LOW;
 80008ca:	2300      	movs	r3, #0
 80008cc:	733b      	strb	r3, [r7, #12]
	SPI2Handle.SPIConfig.SPI_CPHA=SPI_CPHA_LOW;
 80008ce:	2300      	movs	r3, #0
 80008d0:	737b      	strb	r3, [r7, #13]
	SPI2Handle.SPIConfig.SPI_SSM=SPI_SSM_EN; //SOFTWARE SLAVE MANAGEMENT ENABLE FOR NSS PIN
 80008d2:	2301      	movs	r3, #1
 80008d4:	73bb      	strb	r3, [r7, #14]

	SPI_Init(&SPI2Handle);
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	4618      	mov	r0, r3
 80008da:	f7ff fee9 	bl	80006b0 <SPI_Init>



}
 80008de:	bf00      	nop
 80008e0:	3710      	adds	r7, #16
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40003800 	.word	0x40003800

080008ec <main>:

int main(void){
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0
	char userdata[]="Hello world";
 80008f2:	4a0e      	ldr	r2, [pc, #56]	; (800092c <main+0x40>)
 80008f4:	1d3b      	adds	r3, r7, #4
 80008f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80008f8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	//Initialize gpio pins as spi2 pins
	SPI2_GPIO_Inits();
 80008fc:	f7ff ffb6 	bl	800086c <SPI2_GPIO_Inits>
	//Initialize spi2 peripheral parameters
	SPI2_Inits();
 8000900:	f7ff ffd6 	bl	80008b0 <SPI2_Inits>
	//NSS HIGH-> avoid MODF Error
	SPI_SSIConfig(SPI2,ENABLE);
 8000904:	2101      	movs	r1, #1
 8000906:	480a      	ldr	r0, [pc, #40]	; (8000930 <main+0x44>)
 8000908:	f7ff ff94 	bl	8000834 <SPI_SSIConfig>
	//enable spi2 peripheral
	SPI_PeripheralControl(SPI2,ENABLE);
 800090c:	2101      	movs	r1, #1
 800090e:	4808      	ldr	r0, [pc, #32]	; (8000930 <main+0x44>)
 8000910:	f7ff ff74 	bl	80007fc <SPI_PeripheralControl>

	SPI_Send(SPI2, (uint8_t*)userdata, strlen(userdata));
 8000914:	1d3b      	adds	r3, r7, #4
 8000916:	4618      	mov	r0, r3
 8000918:	f7ff fc66 	bl	80001e8 <strlen>
 800091c:	4602      	mov	r2, r0
 800091e:	1d3b      	adds	r3, r7, #4
 8000920:	4619      	mov	r1, r3
 8000922:	4803      	ldr	r0, [pc, #12]	; (8000930 <main+0x44>)
 8000924:	f7ff ff33 	bl	800078e <SPI_Send>
	while(1);
 8000928:	e7fe      	b.n	8000928 <main+0x3c>
 800092a:	bf00      	nop
 800092c:	080009e8 	.word	0x080009e8
 8000930:	40003800 	.word	0x40003800

08000934 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000934:	480d      	ldr	r0, [pc, #52]	; (800096c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000936:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000938:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800093c:	480c      	ldr	r0, [pc, #48]	; (8000970 <LoopForever+0x6>)
  ldr r1, =_edata
 800093e:	490d      	ldr	r1, [pc, #52]	; (8000974 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000940:	4a0d      	ldr	r2, [pc, #52]	; (8000978 <LoopForever+0xe>)
  movs r3, #0
 8000942:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000944:	e002      	b.n	800094c <LoopCopyDataInit>

08000946 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000946:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000948:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800094a:	3304      	adds	r3, #4

0800094c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800094c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800094e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000950:	d3f9      	bcc.n	8000946 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000952:	4a0a      	ldr	r2, [pc, #40]	; (800097c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000954:	4c0a      	ldr	r4, [pc, #40]	; (8000980 <LoopForever+0x16>)
  movs r3, #0
 8000956:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000958:	e001      	b.n	800095e <LoopFillZerobss>

0800095a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800095a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800095c:	3204      	adds	r2, #4

0800095e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800095e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000960:	d3fb      	bcc.n	800095a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000962:	f000 f811 	bl	8000988 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000966:	f7ff ffc1 	bl	80008ec <main>

0800096a <LoopForever>:

LoopForever:
  b LoopForever
 800096a:	e7fe      	b.n	800096a <LoopForever>
  ldr   r0, =_estack
 800096c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000970:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000974:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000978:	080009fc 	.word	0x080009fc
  ldr r2, =_sbss
 800097c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000980:	2000001c 	.word	0x2000001c

08000984 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000984:	e7fe      	b.n	8000984 <ADC_IRQHandler>
	...

08000988 <__libc_init_array>:
 8000988:	b570      	push	{r4, r5, r6, lr}
 800098a:	4d0d      	ldr	r5, [pc, #52]	; (80009c0 <__libc_init_array+0x38>)
 800098c:	4c0d      	ldr	r4, [pc, #52]	; (80009c4 <__libc_init_array+0x3c>)
 800098e:	1b64      	subs	r4, r4, r5
 8000990:	10a4      	asrs	r4, r4, #2
 8000992:	2600      	movs	r6, #0
 8000994:	42a6      	cmp	r6, r4
 8000996:	d109      	bne.n	80009ac <__libc_init_array+0x24>
 8000998:	4d0b      	ldr	r5, [pc, #44]	; (80009c8 <__libc_init_array+0x40>)
 800099a:	4c0c      	ldr	r4, [pc, #48]	; (80009cc <__libc_init_array+0x44>)
 800099c:	f000 f818 	bl	80009d0 <_init>
 80009a0:	1b64      	subs	r4, r4, r5
 80009a2:	10a4      	asrs	r4, r4, #2
 80009a4:	2600      	movs	r6, #0
 80009a6:	42a6      	cmp	r6, r4
 80009a8:	d105      	bne.n	80009b6 <__libc_init_array+0x2e>
 80009aa:	bd70      	pop	{r4, r5, r6, pc}
 80009ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80009b0:	4798      	blx	r3
 80009b2:	3601      	adds	r6, #1
 80009b4:	e7ee      	b.n	8000994 <__libc_init_array+0xc>
 80009b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80009ba:	4798      	blx	r3
 80009bc:	3601      	adds	r6, #1
 80009be:	e7f2      	b.n	80009a6 <__libc_init_array+0x1e>
 80009c0:	080009f4 	.word	0x080009f4
 80009c4:	080009f4 	.word	0x080009f4
 80009c8:	080009f4 	.word	0x080009f4
 80009cc:	080009f8 	.word	0x080009f8

080009d0 <_init>:
 80009d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009d2:	bf00      	nop
 80009d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009d6:	bc08      	pop	{r3}
 80009d8:	469e      	mov	lr, r3
 80009da:	4770      	bx	lr

080009dc <_fini>:
 80009dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009de:	bf00      	nop
 80009e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009e2:	bc08      	pop	{r3}
 80009e4:	469e      	mov	lr, r3
 80009e6:	4770      	bx	lr
